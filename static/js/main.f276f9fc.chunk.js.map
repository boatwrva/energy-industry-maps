{"version":3,"sources":["Omnibox.js","taxonomy-colors.js","common.js","SettingsPane.js","App.js","data-loader.js","index.js"],"names":["Omnibox","props","state","query","hasFocus","searchResults","getCompanies","bind","shouldDisplaySuggestions","setHasFocus","handleResultSelection","handleInputChange","this","companies","map","f","properties","company","length","setState","value","onSelectCompany","searchInput","filter","result","toLowerCase","includes","searchSuggestions","r","key","onMouseDown","className","onClick","onOpenSettingsPane","title","aria-label","aria-hidden","type","id","ref","input","onChange","onFocus","onBlur","placeholder","style","display","document","getElementById","focus","React","Component","TAXONOMY_COLORS","DISPLAY_CATEGORIES","Object","keys","CIRCLE_COLORS","entries","flat","concat","normalizeCategory","s","replace","SettingsPane","onToggleOpen","handleSelectCategory","selectAll","deselectAll","isOpen","e","onToggleCategory","onSelectAllCategories","onDeselectAllCategories","tableRows","category","sanitizedCat","checkboxId","isChecked","selectedCategories","has","name","checked","background","htmlFor","settingsPaneOpen","onStateChange","styles","sidebar","POINT_LAYER","compileCategoryList","companiesGeojson","c","Set","features","values","Array","from","sort","mapboxgl","accessToken","process","App","center","zoom","minZoom","mapTitle","handleToggleCategory","handleSelectAllCategories","handleDeselectAllCategories","handleSelectCompany","handleToggleSettingsPane","displayPopup","feature","coordinates","geometry","slice","popUps","getElementsByClassName","remove","Popup","setLngLat","setHTML","categoryInfo","k","join","getPopupContent","setMaxWidth","addTo","Map","container","mapContainer","on","lng","getCenter","toFixed","lat","getZoom","geojsonLoaded","url","fetch","then","response","text","data","JSON","parse","parsed","forEach","city","tax1","tax2","tax3","website","label","newprop","loadGeojsonData","categories","addControl","FullscreenControl","NavigationControl","addSource","addLayer","source","paint","stops","getCanvas","cursor","flyTo","speed","target","delete","add","normalized","selectedCompany","find","open","getLayer","filters","i","push","setFilter","el","ReactDOM","render"],"mappings":"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","file":"static/js/main.f276f9fc.chunk.js","sourcesContent":["import React from 'react';\n\nclass Omnibox extends React.Component {\n  state = {\n    query: '',\n    hasFocus: false,\n    searchResults: [],\n  };\n\n  constructor(props) {\n    super(props);\n    this.getCompanies = this.getCompanies.bind(this);\n    this.shouldDisplaySuggestions = this.shouldDisplaySuggestions.bind(this);\n    this.setHasFocus = this.setHasFocus.bind(this);\n    this.handleResultSelection = this.handleResultSelection.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n  }\n\n  getCompanies() {\n    if (this.props.companies) {\n      return this.props.companies.map(f => f.properties.company);\n    }\n    return [];\n  }\n\n  shouldDisplaySuggestions() {\n    return this.state.hasFocus && this.state.searchResults.length > 0;\n  }\n\n  setHasFocus(hasFocus) {\n    this.setState({hasFocus: hasFocus});\n  }\n\n  handleResultSelection(value) {\n    this.props.onSelectCompany(value);\n    this.setState({query: value, searchResults: []});\n  }\n\n  handleInputChange() {\n    const query = this.searchInput.value;\n    this.setState({query: query});\n    if (query.length >= 2) {\n      this.setState({\n        searchResults: this.getCompanies().filter(\n          result => result.toLowerCase().includes(query.toLowerCase()))\n      });\n    } else {\n      this.setState({searchResults: []});\n    }\n  }\n\n  render() {\n    const searchSuggestions = this.state.searchResults.map(r => (\n      <li key={r} onMouseDown={() => this.handleResultSelection(r)}>{r}</li>));\n    return (\n      <div className=\"omnibox\">\n        <button\n          className=\"omnibox-burger-menu\"\n          onClick={this.props.onOpenSettingsPane}\n          title=\"Menu\"\n          aria-label=\"Menu\">\n          <span>\n            <span\n              className=\"omnibox-burger-bar omnibox-burger-bar-top\"\n              aria-hidden=\"true\" />\n            <span\n              className=\"omnibox-burger-bar omnibox-burger-bar-middle\"\n              aria-hidden=\"true\" />\n            <span\n              className=\"omnibox-burger-bar omnibox-burger-bar-bottom\"\n              aria-hidden=\"true\" />\n          </span>\n        </button>\n        <div className=\"omnibox-search-input-container\">\n          <input\n            type=\"text\"\n            className=\"omnibox-search-input\"\n            id=\"omnibox-search-input\"\n            ref={input => this.searchInput = input}\n            onChange={this.handleInputChange}\n            value={this.state.query}\n            onFocus={() => this.setHasFocus(true)}\n            onBlur={() => this.setHasFocus(false)}\n            placeholder=\"Search...\" />\n        </div>\n        <div\n          className=\"omnibox-search-suggestions-container\"\n          style={{display: this.shouldDisplaySuggestions() ? \"block\" : \"none\"}}>\n          <ul className=\"omnibox-search-suggestions\">{searchSuggestions}</ul>\n        </div>\n        <button\n          className=\"omnibox-search-button\"\n          title=\"Search\"\n          aria-label=\"Search\"\n          onClick={() => document.getElementById(\"omnibox-search-input\").focus()}>\n          <div className=\"magnifying-glass\" aria-hidden=\"true\">&#9906;</div>\n        </button>\n      </div>);\n  }\n}\n\nexport default Omnibox;\n","const BROWN = '#603e1e'\n\nconst TAXONOMY_COLORS = {\n  'Academia/Research': '#07a4bc',\n  'Accelerator/Incubator': '#c30',\n  'Biofuels': '#7cc908',\n  'Buildings': '#036',\n  'Chemistry': '#c94208',\n  'Circular Economy': '#5a8925',\n  'Construction': BROWN,\n  'Enabling Technology/Components': BROWN,\n  'Energy Systems/Management': '#40a22a',\n  'Engineering': BROWN,\n  'Environmental Remediation': '#89256e',\n  'Evaluation/Compliance': '#9e4e16',\n  'Finance': '#269e11',\n  'Generation/Transmission': '#f80',\n  'Geology': '#9e4e16',\n  'Hydrogen': '#2cf',\n  'IIoT/IoT': '#a92278',\n  'Lighting': '#f4f390',\n  'Manufacturing': '#7b16ce',\n  'Materials': '#7b16ce',\n  'Media': '#d11265',\n  'Mobility as a Service': '#b75e35',\n  'Nuclear': '#f0f',\n  'Oil and Gas': '#ce3b16',\n  'Policy': '#660',\n  'Professional Services': '#164d82',\n  'Security/Cybersecurity': '#2c86f4',\n  'Sensors': '#dd4465',\n  'Solar': '#fce119',\n  'Storage': '#093',\n  'Sustainable Agriculture': '#898925',\n  'Thermal Energy': '#bc6d4b',\n  'Utility/Grid': '#f4a41a',\n  'Wave/Water/Hydro': '#20dbdb',\n  'Wind': '#167d7f',\n};\n\nconst DISPLAY_CATEGORIES = Object.keys(TAXONOMY_COLORS);\n\n// Last entry is fallthrough color\nconst CIRCLE_COLORS = Object.entries(TAXONOMY_COLORS).flat().concat(['#ccc']);\n\nexport { TAXONOMY_COLORS, DISPLAY_CATEGORIES, CIRCLE_COLORS };\n","const normalizeCategory = s => s.toLowerCase().replace(/[/ ]/g, '-');\n\nexport { normalizeCategory };\n","import React from 'react';\nimport Menu from 'react-burger-menu/lib/menus/slide'\nimport { TAXONOMY_COLORS, DISPLAY_CATEGORIES } from './taxonomy-colors.js';\nimport { normalizeCategory } from './common.js';\n\n\nclass SettingsPane extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onToggleOpen = this.onToggleOpen.bind(this);\n    this.handleSelectCategory = this.handleSelectCategory.bind(this);\n    this.selectAll = this.selectAll.bind(this);\n    this.deselectAll = this.deselectAll.bind(this);\n  }\n\n  onToggleOpen(state) { this.props.onToggleOpen(state.isOpen); }\n\n  handleSelectCategory(e) { this.props.onToggleCategory(e); }\n\n  selectAll() { this.props.onSelectAllCategories(); }\n\n  deselectAll() { this.props.onDeselectAllCategories(); }\n\n  render() {\n    const tableRows = DISPLAY_CATEGORIES.map(category => {\n      const sanitizedCat = normalizeCategory(category);\n      const checkboxId = `${sanitizedCat}-checkbox`;\n      const isChecked = this.props.selectedCategories.has(sanitizedCat);\n      return (\n        <tr key={sanitizedCat}>\n          <td>\n            <input\n              type=\"checkbox\"\n              id={checkboxId}\n              name={sanitizedCat}\n              checked={isChecked}\n              className='category-filter-checkbox'\n              onChange={this.handleSelectCategory} />\n          </td>\n          <td>\n            <i className=\"category-legend\"\n            style={{background: TAXONOMY_COLORS[category]}}></i>\n          </td>\n          <td><label htmlFor={checkboxId}>{category}</label></td>\n        </tr>);\n    });\n\n    return (\n      <div>\n        <Menu\n          isOpen={this.props.settingsPaneOpen}\n          onStateChange={this.onToggleOpen}\n          styles={{ sidebar: { background: \"white\" } }}>\n          <div className=\"map-settings-pane\">\n            <div className=\"map-settings-pane-section-header\">\n              <span>Filter by Category</span>\n              <div className=\"bm-cross-button\"></div>\n            </div>\n            <div className=\"map-settings-pane-content\">\n              <button id=\"select-all\" className=\"select-all\" onClick={this.selectAll}>Select all</button>\n              <button id=\"select-none\" className=\"select-all\" onClick={this.deselectAll}>Clear all</button>\n              <table id=\"categories\"><tbody>{tableRows}</tbody></table>\n            </div>\n          </div>\n        </Menu>\n      </div>\n    );\n  }\n}\n\nexport default SettingsPane;\n","import mapboxgl from 'mapbox-gl';\nimport React from 'react';\nimport Omnibox from './Omnibox.js';\nimport SettingsPane from \"./SettingsPane.js\";\nimport { CIRCLE_COLORS, DISPLAY_CATEGORIES } from './taxonomy-colors.js';\nimport { loadGeojsonData } from './data-loader.js';\nimport { normalizeCategory } from './common.js';\nimport './App.css';\n\nconst POINT_LAYER = 'energy-companies-point-layer'\n\nmapboxgl.accessToken = process.env.REACT_APP_MAPBOX_API_TOKEN;\n\nfunction getPopupContent(props) {\n  const categoryInfo = ['tax1', 'tax2', 'tax3']\n    .map(k => props[k])\n    .filter(s => s).join(\" | \");\n  return `\n    <div class=\"popup\">\n      <h3 class=\"company-name\">${props['company']}</h3>\n      <span class=\"category-info\">${categoryInfo}</span><br />\n      <span class=\"city-info\">${props['city']}</span><br />\n      <span><a href=${props['website']} target=\"blank\">${props['website']}</a></span>\n    </div>`;\n}\n\nfunction compileCategoryList(companiesGeojson) {\n  const c = new Set(companiesGeojson.features.map(f => f.properties['tax1']));\n  return Object.values(Array.from(c)).sort();\n}\n\nclass App extends React.Component {\n  map;\n  state = {\n    center: [-121, 36.5],\n    zoom: 6,\n    minZoom: 6,\n    companiesGeojson: {},\n    selectedCategories: new Set(),\n    settingsPaneOpen: false,\n    mapTitle: 'Silicon Valley Energy Ecosystem, 2019',\n  };\n\n  constructor(props) {\n    super(props);\n    this.handleToggleCategory = this.handleToggleCategory.bind(this);\n    this.handleSelectAllCategories = this.handleSelectAllCategories.bind(this);\n    this.handleDeselectAllCategories = this.handleDeselectAllCategories.bind(this);\n    this.handleSelectCompany = this.handleSelectCompany.bind(this);\n    this.handleToggleSettingsPane = this.handleToggleSettingsPane.bind(this);\n    this.displayPopup = this.displayPopup.bind(this);\n  }\n\n  displayPopup(feature) {\n    const coordinates = feature.geometry.coordinates.slice();\n    var popUps = document.getElementsByClassName('mapboxgl-popup');\n    // Check if there is already a popup on the map and if so, remove it\n    // This prevents multiple popups in the case of overlapping circles\n    if (popUps[0]) popUps[0].remove();\n\n    new mapboxgl.Popup({})\n      .setLngLat(coordinates)\n      .setHTML(getPopupContent(feature.properties))\n      .setMaxWidth(\"40vw\")\n      .addTo(this.map);\n  }\n\n  componentDidMount() {\n    this.map = new mapboxgl.Map({\n      container: this.mapContainer,\n      style: 'mapbox://styles/mapbox/dark-v10',\n      center: this.state.center,\n      zoom: this.state.zoom,\n      minZoom: this.state.minZoom,\n    });\n\n    this.map.on('move', () => {\n      this.setState({\n        lng: this.map.getCenter().lng.toFixed(4),\n        lat: this.map.getCenter().lat.toFixed(4),\n        zoom: this.map.getZoom().toFixed(2)\n      });\n    });\n\n    const geojsonLoaded = loadGeojsonData().then(companiesGeojson => {\n      this.setState({\n        companiesGeojson: companiesGeojson,\n        categories: compileCategoryList(companiesGeojson),\n      });\n\n      // initially select all categories\n      this.handleSelectAllCategories();\n\n      return companiesGeojson;\n    });\n\n    this.map.on('load', () => {\n      this.map.addControl(new mapboxgl.FullscreenControl(), 'bottom-right');\n      this.map.addControl(new mapboxgl.NavigationControl(), 'bottom-right');\n\n      geojsonLoaded.then(companiesGeojson => {\n        this.map.addSource('companies', {\n          type: 'geojson',\n          data: companiesGeojson,\n        });\n\n        this.map.addLayer({\n          id: POINT_LAYER,\n          type: 'circle',\n          source: 'companies',\n          paint: {\n            // make circles larger as the user zooms\n            'circle-radius': {\n              stops: [[7, 5], [14, 12], [20, 50]]\n            },\n            'circle-opacity': 0.85,\n            // color circles by primary category\n            'circle-color': ['match', ['get', 'tax1']].concat(CIRCLE_COLORS),\n            'circle-stroke-color': '#fff',\n            'circle-stroke-width': 0.4,\n          }\n        });\n\n        this.map.on('mouseenter', POINT_LAYER, (e) => {\n          this.map.getCanvas().style.cursor = 'pointer';\n        });\n\n        this.map.on('mouseleave', POINT_LAYER, () => {\n          this.map.getCanvas().style.cursor = '';\n        });\n\n        this.map.on('click', POINT_LAYER, e => this.displayPopup(e.features[0]));\n\n        this.map.flyTo({\n          center: [-122.21, 37.65], // [lng, lat]\n          zoom: 8,\n          speed: 0.5,\n        });\n      });\n    });\n  }\n\n  handleToggleCategory(e) {\n    var s = this.state.selectedCategories;\n    if (s.has(e.target.name)) {\n      s.delete(e.target.name);\n    } else {\n      s.add(e.target.name);\n    }\n    this.setState({selectedCategories: s});\n  }\n\n  handleSelectAllCategories() {\n    let normalized = DISPLAY_CATEGORIES.map(normalizeCategory);\n    this.setState({selectedCategories: new Set(normalized)});\n  }\n\n  handleDeselectAllCategories() {\n    this.setState({selectedCategories: new Set()});\n  }\n\n  handleSelectCompany(e) {\n    const selectedCompany = this.state.companiesGeojson.features.find(\n        feature => feature.properties.company === e);\n    this.displayPopup(selectedCompany);\n    this.map.flyTo({\n      center: selectedCompany.geometry.coordinates,\n      zoom: 14,\n    });\n  }\n\n  handleToggleSettingsPane(open) {\n    this.setState({settingsPaneOpen: open});\n  }\n\n  componentDidUpdate() {\n    if (this.map.getLayer(POINT_LAYER)) {\n      var filters = [\"any\"];\n      // If ANY of the 3 taxonomies for a company are selected, it should be\n      // displayed on the map.\n      const selectedCategories = this.state.selectedCategories;\n      [1, 2, 3].forEach(i => {\n        var filter = [\"in\", `tax${i}sanitized`];\n        selectedCategories.forEach(category => filter.push(category));\n        filters.push(filter);\n      });\n      this.map.setFilter(POINT_LAYER, filters);\n    }\n  }\n\n  render() {\n    return (\n      <div id=\"app-container\">\n        <SettingsPane\n          onToggleOpen={this.handleToggleSettingsPane}\n          settingsPaneOpen={this.state.settingsPaneOpen}\n          selectedCategories={this.state.selectedCategories}\n          onSelectAllCategories={this.handleSelectAllCategories}\n          onDeselectAllCategories={this.handleDeselectAllCategories}\n          onToggleCategory={this.handleToggleCategory} />\n        <div ref={el => this.mapContainer = el} id=\"map-container\" />\n        <div className=\"map-overlay\">\n          <div className=\"map-title-and-search\">\n            <div className=\"map-title\">{this.state.mapTitle}</div>\n            <Omnibox\n              companies={this.state.companiesGeojson.features}\n              onSelectCompany={this.handleSelectCompany}\n              onOpenSettingsPane={() => this.handleToggleSettingsPane(true)} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import mapboxgl from 'mapbox-gl';\nimport { normalizeCategory } from './common.js';\n\nconst DATASETS_ENDPOINT = \"https://api.mapbox.com/datasets/v1\";\nconst USER = process.env.REACT_APP_MAPBOX_USER;\n// TODO: Parameterize over dataset id, as we will want the flexibility to load\n// other datasets.\nconst DATASET_ID = \"ck901ssdl1sxn2mmnj56s9ibm\";\n\nfunction loadGeojsonData() {\n  let url = `${DATASETS_ENDPOINT}/${USER}/${DATASET_ID}/features?access_token=${mapboxgl.accessToken}`;\n  return fetch(url)\n    .then(response => response.text())\n    .then(data => JSON.parse(data))\n    .then(parsed => {\n      parsed.features.forEach(feature => {\n        // filter properties (TODO: Can we change this dataset-side?)\n        feature.properties = {\n          'company': feature.properties.company,\n          'city': feature.properties.city,\n          'tax1': feature.properties.tax1,\n          'tax2': feature.properties.tax2,\n          'tax3': feature.properties.tax3,\n          'website': feature.properties.website,\n        };\n        ['tax1', 'tax2', 'tax3'].forEach(label => {\n          const newprop = `${label}sanitized`;\n          feature.properties[newprop] = normalizeCategory(feature.properties[label]);\n        })\n      });\n      return parsed;\n    });\n}\n\nexport { loadGeojsonData };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}