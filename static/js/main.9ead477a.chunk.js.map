{"version":3,"sources":["Omnibox.js","config.js","LocationSelector.js","taxonomy-colors.js","common.js","SettingsPane.js","Theme.js","App.js","index.js"],"names":["useStyles","makeStyles","theme","root","display","border","position","height","menuButton","margin","padding","verticalDivider","width","backgroundColor","content","searchInputContainer","left","searchInput","Omnibox","props","classes","className","IconButton","edge","color","aria-label","onClick","onOpenSettingsPane","style","fontSize","Autocomplete","id","freeSolo","selectOnFocus","handleHomeEndKeys","disableClearable","onChange","e","value","target","textContent","onSelectCompany","options","companies","map","f","properties","company","renderInput","params","TextField","placeholder","variant","MAPS","title","shortName","datasetId","center","flyTo","asOption","mapId","label","container","formControl","spacing","minWidth","locationSelectorDropdown","divider","goButton","LocationSelector","useState","selectedMapId","selectedMap","setSelectedMap","items","Object","keys","FormControl","Select","item","index","MenuItem","key","Button","onSelectMap","TAXONOMY_COLORS","DISPLAY_CATEGORIES","CIRCLE_COLORS","entries","flat","concat","normalizeCategory","s","toLowerCase","replace","settingsPane","background","settingsPaneHeader","settingsPaneContent","settingsPaneSubheader","categoryLabel","categoryLegend","selectAllNone","LightBlueCheckbox","withStyles","checked","Checkbox","SettingsPane","formControlLabels","category","idx","sanitizedCat","isChecked","selectedCategories","has","FormControlLabel","control","onToggleCategory","name","Drawer","open","settingsPaneOpen","onClose","onToggleOpen","Divider","ButtonGroup","onSelectAllCategories","onDeselectAllCategories","component","FormGroup","THEME","createMuiTheme","palette","primary","main","secondary","green","POINT_LAYER","ALL_CATEGORIES","Set","displayPopup","feature","coordinates","geometry","slice","popUps","document","getElementsByClassName","remove","mapboxgl","Popup","setLngLat","setHTML","categoryInfo","k","filter","join","getPopupContent","setMaxWidth","addTo","populateMapData","mapData","then","data","addSource","type","addLayer","source","paint","stops","on","getCanvas","cursor","features","zoom","speed","App","thisMap","setThisMap","setSelectedMapId","companiesGeojson","setCompaniesGeojson","setSelectedCategories","setSettingsPaneOpen","loadGeojsonData","url","process","accessToken","fetch","response","json","parsed","forEach","newprop","fetchMapData","geojson","handleSelectAllCategories","useEffect","Map","minZoom","addControl","FullscreenControl","NavigationControl","initMap","getLayer","filters","i","push","setFilter","ThemeProvider","removeLayer","removeSource","delete","add","selectedCompany","find","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.9ead477a.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    'background-color': '#fff',\n    border: '1px solid #ccc',\n    'border-radius': 5,\n    'max-width': 364,\n    position: 'relative',\n    'padding-right': 4,\n    height: 42,\n  },\n  menuButton: {\n    margin: 0,\n    padding: 7,\n  },\n  verticalDivider: {\n    display: 'block',\n    width: 1,\n    height: 28,\n    'margin-top': 7,\n    backgroundColor: '#ccc',\n    content: '',\n  },\n  searchInputContainer: {\n    position: 'absolute',\n    left: 48,\n    'flex-grow': 1,\n  },\n  searchInput: {\n    height: 40,\n    width: 312,\n    padding: 1,\n    margin: '0px 8px',\n  },\n}));\n\n\nexport default function Omnibox(props) {\n  const classes = useStyles();\n\n  function getCompanies() {\n    if (props.companies) {\n      return props.companies.map(f => f.properties.company);\n    }\n    return [];\n  }\n\n  function handleResultSelection(value) {\n    if (value) {\n      props.onSelectCompany(value);\n    }\n  }\n\n  // TODO: Get the clear button (x) to work! (Take away disableClearable.)\n  // TODO: Allow searching by hitting <Enter>.\n  return (\n    <div className={classes.root}>\n      <IconButton\n        edge=\"start\"\n        color=\"inherit\"\n        aria-label=\"menu\"\n        className={classes.menuButton}\n        onClick={props.onOpenSettingsPane}>\n        <MenuIcon style={{fontSize: '1.8rem'}} />\n      </IconButton>\n      <span className={classes.verticalDivider} />\n      <Autocomplete\n        id=\"omnibox-search-input\"\n        freeSolo\n        selectOnFocus\n        handleHomeEndKeys\n        disableClearable\n        onChange={e => handleResultSelection(e.target.textContent)}\n        options={getCompanies()}\n        renderInput={(params) => (\n          <TextField {...params}\n            placeholder=\"Search\"\n            className={classes.searchInput}\n            margin=\"dense\"\n            variant=\"outlined\" />\n        )}\n      />\n    </div>);\n}\n","export const MAPS = {\n  'sf': {\n    id: 'sf',\n    title: 'Silicon Valley Energy Ecosystem, 2019',\n    shortName: 'San Francisco Bay Area',\n    datasetId: 'ck901ssdl1sxn2mmnj56s9ibm',\n    center: [-121, 36.5],\n    flyTo: [-122.21, 37.65],\n  },\n  'chicago': {\n    id: 'chicago',\n    title: 'Chicago Energy Ecosystem',\n    shortName: 'Chicago',\n    datasetId: 'ckbz9iagz0jjv29qrzry2ogtj', // TEMPORARY; FIXME!\n    center: [-88.5, 41.1],\n    flyTo: [-87.829, 41.879],\n  }\n}\n","import React, { useState  } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport FormControl from '@material-ui/core/FormControl';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport Button from '@material-ui/core/Button';\nimport { MAPS } from './config';\n\nconst asOption = mapId => ({label: MAPS[mapId].shortName, value: mapId});\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    display: 'flex',\n    'flex-direction': 'row',\n  },\n  formControl: {\n    margin: theme.spacing(0.5),\n    minWidth: 120,\n    width: '100%',\n    'flex-direction': 'row',\n  },\n  locationSelectorDropdown: {\n    'flex-grow': 1,\n    'font-family': 'Open Sans',\n    'font-size': '10pt',\n  },\n  divider: {\n    height: 22,\n    width: 2,\n    content: '',\n  },\n  goButton: {\n    height: '100%',\n  }\n}));\n\nexport default function LocationSelector(props) {\n  const [selectedMap, setSelectedMap] = useState(asOption(props.selectedMapId));\n  const classes = useStyles();\n\n  const items = Object.keys(MAPS).map(asOption);\n\n  return (\n      <div className={classes.container}>\n        <FormControl variant=\"outlined\" className={classes.formControl}>\n          <Select\n            value={selectedMap.value}\n            className={classes.locationSelectorDropdown}\n            onChange={e => setSelectedMap(asOption(e.target.value))}\n          >\n            {items.map((item, index) => (\n              <MenuItem\n                key={index}\n                value={item.value}>\n                {item.label}\n              </MenuItem>))}\n          </Select>\n          <div className={classes.divider} />\n          <Button\n            color=\"primary\"\n            variant=\"contained\"\n            className={classes.goButton}\n            onClick={() => props.onSelectMap(selectedMap.value)}>\n            Go\n          </Button>\n        </FormControl>\n      </div>\n  );\n}\n","const BROWN = '#603e1e'\n\nexport const TAXONOMY_COLORS = {\n  'Academia/Research': '#07a4bc',\n  'Accelerator/Incubator': '#c30',\n  'Biofuels': '#7cc908',\n  'Buildings': '#036',\n  'Chemistry': '#c94208',\n  'Circular Economy': '#5a8925',\n  'Construction': BROWN,\n  'Enabling Technology/Components': BROWN,\n  'Energy Systems/Management': '#40a22a',\n  'Engineering': BROWN,\n  'Environmental Remediation': '#89256e',\n  'Evaluation/Compliance': '#9e4e16',\n  'Finance': '#269e11',\n  'Generation/Transmission': '#f80',\n  'Geology': '#9e4e16',\n  'Hydrogen': '#2cf',\n  'IIoT/IoT': '#a92278',\n  'Lighting': '#f4f390',\n  'Manufacturing': '#7b16ce',\n  'Materials': '#7b16ce',\n  'Media': '#d11265',\n  'Mobility as a Service': '#b75e35',\n  'Nuclear': '#f0f',\n  'Oil and Gas': '#ce3b16',\n  'Policy': '#660',\n  'Professional Services': '#164d82',\n  'Security/Cybersecurity': '#2c86f4',\n  'Sensors': '#dd4465',\n  'Solar': '#fce119',\n  'Storage': '#093',\n  'Sustainable Agriculture': '#898925',\n  'Thermal Energy': '#bc6d4b',\n  'Utility/Grid': '#f4a41a',\n  'Wave/Water/Hydro': '#20dbdb',\n  'Wind': '#167d7f',\n};\n\nexport const DISPLAY_CATEGORIES = Object.keys(TAXONOMY_COLORS);\n\n// Last entry is fallthrough color\nexport const CIRCLE_COLORS = Object.entries(TAXONOMY_COLORS).flat().concat(['#ccc']);\n","export const normalizeCategory = s => s.toLowerCase().replace(/[/ ]/g, '-');\n","import React from 'react';\nimport LocationSelector from './LocationSelector';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport Divider from '@material-ui/core/Divider';\nimport { TAXONOMY_COLORS, DISPLAY_CATEGORIES } from './taxonomy-colors';\nimport { normalizeCategory } from './common';\n\n\nconst useStyles = makeStyles((theme) => ({\n  settingsPane: {\n    background: 'rgba(244, 244, 244, 0.93)',\n    'max-width': 320,\n  },\n  settingsPaneHeader: {\n    'background-color': '#02346d',\n    color: '#ffffff',\n    border: 0,\n    'text-align': 'center',\n    'font-size': '14pt',\n    padding: 8,\n  },\n  settingsPaneContent: {\n    padding: 4,\n  },\n  settingsPaneSubheader: {\n    'font-family': 'Roboto',\n    'font-size': '12pt',\n    padding: 6,\n  },\n  categoryLabel: {\n    display: 'flex',\n    'flex-direction': 'row',\n    'verical-align': 'middle',\n    'font-family': 'Open Sans',\n    'font-size': '10pt',\n  },\n  categoryLegend: {\n    content: '',\n    width: 15,\n    height: 15,\n    margin: 4,\n    padding: 0,\n    'border-radius': 3,\n  },\n  formControl: {\n    margin: theme.spacing(0.1),\n  },\n  selectAllNone: {\n    'text-transform': 'none',\n  },\n}));\n\nconst LightBlueCheckbox = withStyles({\n  root: {\n    color: '#666',\n    '&$checked': {\n      color: '#50a2b2',\n    },\n  },\n  checked: {},\n})((props) => <Checkbox color=\"default\" {...props} />);\n\nexport default function SettingsPane(props) {\n  const classes = useStyles();\n\n  const formControlLabels = DISPLAY_CATEGORIES.map((category, idx) => {\n    const sanitizedCat = normalizeCategory(category);\n    const isChecked = props.selectedCategories.has(sanitizedCat);\n\n    return (\n      <FormControlLabel\n        key={idx}\n        control={\n          <LightBlueCheckbox\n            checked={isChecked}\n            onChange={props.onToggleCategory}\n            name={sanitizedCat} />}\n        label={\n          <div className={classes.categoryLabel}>\n            <span\n              className={classes.categoryLegend}\n              style={{background: TAXONOMY_COLORS[category]}} />\n          {category}\n          </div>}\n      />);\n  });\n\n  return (\n    <Drawer\n      open={props.settingsPaneOpen}\n      onClose={() => props.onToggleOpen(false)}>\n      <div className={classes.settingsPane}>\n        <div className={classes.settingsPaneHeader}>\n          <span>Options</span>\n        </div>\n        <div className={classes.settingsPaneContent}>\n          <div className={classes.settingsPaneSubheader}>\n            <span>Select a location</span>\n          </div>\n          <LocationSelector\n            onSelectMap={props.onSelectMap}\n            selectedMapId={props.selectedMapId} />\n          <Divider />\n          <div className={classes.settingsPaneSubheader}>\n            <span>Filter by category</span>\n          </div>\n          <div>\n            <ButtonGroup color=\"primary\" variant=\"contained\">\n              <Button\n                id=\"select-all\"\n                className={classes.selectAllNone}\n                onClick={props.onSelectAllCategories}>Select all</Button>\n              <Button\n                id=\"select-none\"\n                className={classes.selectAllNone}\n                onClick={props.onDeselectAllCategories}>Clear all</Button>\n            </ButtonGroup>\n          </div>\n          <FormControl component=\"fieldset\" className={classes.formControl}>\n            <FormGroup>{formControlLabels}</FormGroup>\n          </FormControl>\n        </div>\n      </div>\n    </Drawer>\n  );\n}\n","import { createMuiTheme } from '@material-ui/core/styles';\nimport green from '@material-ui/core/colors/green';\n\nexport const THEME = createMuiTheme({\n  palette: {\n    primary: {\n      main: \"#02346d\",\n    },\n    secondary: {\n      main: green[500],\n    },\n  },\n});\n","import mapboxgl from 'mapbox-gl';\nimport React, { useState, useEffect } from 'react';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport Omnibox from './Omnibox';\nimport SettingsPane from './SettingsPane';\nimport { CIRCLE_COLORS, DISPLAY_CATEGORIES } from './taxonomy-colors';\nimport { normalizeCategory } from './common';\nimport { MAPS } from './config';\nimport { THEME } from './Theme';\nimport './App.css';\n\nconst COMPANIES_SOURCE = 'companies';\nconst POINT_LAYER = 'energy-companies-point-layer';\nconst DATASETS_ENDPOINT = \"https://api.mapbox.com/datasets/v1\";\nconst USER = process.env.REACT_APP_MAPBOX_USER;\nconst ALL_CATEGORIES = new Set(DISPLAY_CATEGORIES.map(normalizeCategory));\n\nmapboxgl.accessToken = process.env.REACT_APP_MAPBOX_API_TOKEN;\n\nfunction fetchMapData(datasetId) {\n  let url = `${DATASETS_ENDPOINT}/${USER}/${datasetId}/features?access_token=${mapboxgl.accessToken}`;\n  return fetch(url)\n    .then(response => response.json())\n    .then(parsed => {\n      parsed.features.forEach(feature => {\n        // canonicalize categories for use as labels\n        ['tax1', 'tax2', 'tax3'].forEach(label => {\n          const newprop = `${label}sanitized`;\n          feature.properties[newprop] = normalizeCategory(feature.properties[label]);\n        })\n      });\n      return parsed;\n    });\n}\n\nfunction getPopupContent(props) {\n  const categoryInfo = ['tax1', 'tax2', 'tax3']\n    .map(k => props[k])\n    .filter(s => s).join(\" | \");\n  return `\n    <div class=\"popup\">\n      <h3 class=\"company-name\">${props['company']}</h3>\n      <span class=\"category-info\">${categoryInfo}</span><br />\n      <span class=\"city-info\">${props['city']}</span><br />\n      <span>\n        <a href=${props['website']} target=\"blank\">${props['website']}</a>\n      </span>\n    </div>`;\n}\n\nfunction displayPopup(map, feature) {\n  const coordinates = feature.geometry.coordinates.slice();\n  var popUps = document.getElementsByClassName('mapboxgl-popup');\n  // Check if there is already a popup on the map and if so, remove it\n  // This prevents multiple popups in the case of overlapping circles\n  if (popUps[0]) popUps[0].remove();\n\n  new mapboxgl.Popup({})\n    .setLngLat(coordinates)\n    .setHTML(getPopupContent(feature.properties))\n    .setMaxWidth(\"300px\")\n    .addTo(map);\n}\n\nfunction populateMapData(map, mapId, mapData) {\n  mapData.then(data => {\n    map.addSource(COMPANIES_SOURCE, {\n      type: 'geojson',\n      data: data,\n    });\n\n    map.addLayer({\n      id: POINT_LAYER,\n      type: 'circle',\n      source: COMPANIES_SOURCE,\n      paint: {\n        // make circles larger as the user zooms\n        'circle-radius': {\n          stops: [[7, 5], [14, 12], [20, 50]]\n        },\n        'circle-opacity': 0.85,\n        // color circles by primary category\n        'circle-color': ['match', ['get', 'tax1']].concat(CIRCLE_COLORS),\n        'circle-stroke-color': '#fff',\n        'circle-stroke-width': 0.4,\n      }\n    });\n\n    map.on('mouseenter', POINT_LAYER, (e) => {\n      map.getCanvas().style.cursor = 'pointer';\n    });\n\n    map.on('mouseleave', POINT_LAYER, () => {\n      map.getCanvas().style.cursor = '';\n    });\n\n    map.on('click', POINT_LAYER, e => displayPopup(map, e.features[0]));\n\n    map.flyTo({\n      center: MAPS[mapId].flyTo,\n      zoom: 8,\n      speed: 0.5,\n    });\n  });\n}\n\nexport default function App() {\n  const [thisMap, setThisMap] = useState(null);\n  const [selectedMapId, setSelectedMapId] = useState('sf'); // FIXME: no default\n  const [companiesGeojson, setCompaniesGeojson] = useState({});\n  const [selectedCategories, setSelectedCategories] = useState(ALL_CATEGORIES);\n  const [settingsPaneOpen, setSettingsPaneOpen] = useState(false);\n\n  function loadGeojsonData(mapId) {\n    return fetchMapData(MAPS[mapId].datasetId)\n      .then(geojson => {\n        setCompaniesGeojson(geojson);\n        // initially select all categories\n        handleSelectAllCategories();\n        return geojson;\n    });\n  }\n\n  function handleToggleCategory(e) {\n    var s = new Set(selectedCategories);\n    if (s.has(e.target.name)) {\n      s.delete(e.target.name);\n    } else {\n      s.add(e.target.name);\n    }\n    setSelectedCategories(s);\n  }\n\n  function handleSelectAllCategories() {\n    setSelectedCategories(ALL_CATEGORIES);\n  }\n\n  function handleDeselectAllCategories() {\n    setSelectedCategories(new Set());\n  }\n\n  function handleSelectCompany(e) {\n    const selectedCompany = companiesGeojson.features.find(\n        feature => feature.properties.company === e);\n    displayPopup(thisMap, selectedCompany);\n    thisMap.flyTo({\n      center: selectedCompany.geometry.coordinates,\n      zoom: 14,\n    });\n  }\n\n  function handleSelectMap(mapId) {\n    if (mapId !== selectedMapId) {\n      thisMap.removeLayer(POINT_LAYER);\n      thisMap.removeSource(COMPANIES_SOURCE);\n      setSelectedMapId(mapId);\n      setSettingsPaneOpen(false);\n      populateMapData(thisMap, mapId, loadGeojsonData(mapId));\n    }\n  }\n\n  function initMap() {\n    let map = new mapboxgl.Map({\n      container: \"map-container\",\n      style: 'mapbox://styles/mapbox/dark-v10',\n      center: MAPS[selectedMapId].center,\n      zoom: 6,\n      minZoom: 6,\n    });\n    let mapData = loadGeojsonData(selectedMapId);\n\n    map.on('load', () => {\n      map.addControl(new mapboxgl.FullscreenControl(), 'bottom-right');\n      map.addControl(new mapboxgl.NavigationControl(), 'bottom-right');\n      populateMapData(map, selectedMapId, mapData);\n    });\n    setThisMap(map);\n  }\n\n  useEffect(() => {\n    if (!thisMap) {\n      initMap();\n    }\n\n    if (thisMap) {\n      if (thisMap.getLayer(POINT_LAYER)) {\n        var filters = [\"any\"];\n        // If ANY of the 3 taxonomies for a company are selected, it should be\n        // displayed on the map.\n        [1, 2, 3].forEach(i => {\n          var filter = [\"in\", `tax${i}sanitized`];\n          selectedCategories.forEach(category => filter.push(category));\n          filters.push(filter);\n        });\n        thisMap.setFilter(POINT_LAYER, filters);\n      }\n    }\n  });\n\n  return (\n    <div id=\"app-container\">\n      <ThemeProvider theme={THEME}>\n        <SettingsPane\n          selectedMapId={selectedMapId}\n          settingsPaneOpen={settingsPaneOpen}\n          selectedCategories={selectedCategories}\n          onToggleOpen={setSettingsPaneOpen}\n          onSelectMap={handleSelectMap}\n          onSelectAllCategories={handleSelectAllCategories}\n          onDeselectAllCategories={handleDeselectAllCategories}\n          onToggleCategory={handleToggleCategory} />\n        <div id=\"map-container\" />\n        <div className=\"map-overlay\">\n          <div className=\"map-title-and-search\">\n            <div className=\"map-title\">{MAPS[selectedMapId].title}</div>\n            <Omnibox\n              companies={companiesGeojson.features}\n              onSelectCompany={handleSelectCompany}\n              onOpenSettingsPane={() => setSettingsPaneOpen(true)} />\n          </div>\n        </div>\n      </ThemeProvider>\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}