{"version":3,"sources":["taxonomy-colors.js","common.js","CompanyFilter.js","CompanySelector.js","data-loader.js","App.js","index.js"],"names":["TAXONOMY_COLORS","DISPLAY_CATEGORIES","Object","keys","CIRCLE_COLORS","entries","flat","concat","normalizeCategory","s","toLowerCase","replace","CompanyFilter","props","state","displayCategories","handleSelectCategory","bind","selectAll","deselectAll","toggleDisplayCategoryList","this","onSelectAllCategories","onDeselectAllCategories","e","onToggleCategory","setState","tableRows","map","category","sanitizedCat","checkboxId","isChecked","selectedCategories","has","key","type","id","name","checked","onChange","className","style","background","htmlFor","onClick","React","Component","CompanySelector","option","handleChange","onSelectCompany","value","options","companies","f","properties","company","label","placeholder","DATASETS_ENDPOINT","USER","DATASET_ID","POINT_LAYER","compileCategoryList","companiesGeojson","c","Set","features","values","Array","from","sort","mapboxgl","accessToken","App","center","zoom","minZoom","handleToggleCategory","handleSelectAllCategories","handleDeselectAllCategories","handleSelectCompany","displayPopup","feature","coordinates","geometry","slice","popUps","document","getElementsByClassName","remove","Popup","setLngLat","setHTML","categoryInfo","k","filter","join","getPopupContent","setMaxWidth","addTo","Map","container","mapContainer","on","lng","getCenter","toFixed","lat","getZoom","addControl","FullscreenControl","NavigationControl","fetch","then","response","text","data","JSON","parse","parsed","forEach","city","tax1","tax2","tax3","website","newprop","categories","addSource","addLayer","source","paint","stops","getCanvas","cursor","flyTo","speed","target","delete","add","normalized","selectedCompany","find","getLayer","filters","i","push","setFilter","ref","el","ReactDOM","render","getElementById"],"mappings":"oSAEMA,EAAkB,CACtB,oBAAqB,UACrB,wBAAyB,OACzB,SAAY,UACZ,UAAa,OACb,UAAa,UACb,mBAAoB,UACpB,aATY,UAUZ,iCAVY,UAWZ,4BAA6B,UAC7B,YAZY,UAaZ,4BAA6B,UAC7B,wBAAyB,UACzB,QAAW,UACX,0BAA2B,OAC3B,QAAW,UACX,SAAY,OACZ,WAAY,UACZ,SAAY,UACZ,cAAiB,UACjB,UAAa,UACb,MAAS,UACT,wBAAyB,UACzB,QAAW,OACX,cAAe,UACf,OAAU,OACV,wBAAyB,UACzB,yBAA0B,UAC1B,QAAW,UACX,MAAS,UACT,QAAW,OACX,0BAA2B,UAC3B,iBAAkB,UAClB,eAAgB,UAChB,mBAAoB,UACpB,KAAQ,WAGJC,EAAqBC,OAAOC,KAAKH,GAGjCI,EAAgBF,OAAOG,QAAQL,GAAiBM,OAAOC,OAAO,CAAC,SC3C/DC,EAAoB,SAAAC,GAAC,OAAIA,EAAEC,cAAcC,QAAQ,QAAS,MCuEjDC,E,YA9Db,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KALRC,MAAQ,CACNC,mBAAmB,GAKnB,EAAKC,qBAAuB,EAAKA,qBAAqBC,KAA1B,gBAC5B,EAAKC,UAAY,EAAKA,UAAUD,KAAf,gBACjB,EAAKE,YAAc,EAAKA,YAAYF,KAAjB,gBACnB,EAAKG,0BAA4B,EAAKA,0BAA0BH,KAA/B,gBALhB,E,yEAQLI,KAAKR,MAAMS,0B,oCAETD,KAAKR,MAAMU,4B,2CAENC,GAAKH,KAAKR,MAAMY,iBAAiBD,K,kDAGpD,IAAMT,EAAoBM,KAAKP,MAAMC,kBACrCM,KAAKK,SAAS,CAACX,mBAAoBA,M,+BAG3B,IAAD,OACDY,EAAY1B,EAAmB2B,KAAI,SAAAC,GACvC,IAAMC,EAAetB,EAAkBqB,GACjCE,EAAU,UAAMD,EAAN,aACVE,EAAY,EAAKnB,MAAMoB,mBAAmBC,IAAIJ,GACpD,OACE,wBAAIK,IAAKL,GACP,4BACE,2BACEM,KAAK,WACLC,GAAIN,EACJO,KAAMR,EACNS,QAASP,EACTQ,SAAU,EAAKxB,wBAEnB,4BACE,uBAAGyB,UAAU,kBACbC,MAAO,CAACC,WAAY3C,EAAgB6B,OAEtC,4BAAI,2BAAOe,QAASb,GAAaF,QAIvC,OACE,yBAAKQ,GAAG,iBAAiBI,UAAWpB,KAAKP,MAAMC,kBAAoB,KAAO,UACxE,4BAAQsB,GAAG,gBAAgBQ,QAASxB,KAAKD,2BACvC,yBAAKqB,UAAU,YACb,yBAAKA,UAAU,aAAY,0BAAMA,UAAU,UAAhB,uBAC3B,yBAAKA,UAAU,kBAAiB,8BAAW,8BAAW,iCAG1D,yBAAKA,UAAU,WACb,6BACE,4BAAQJ,GAAG,aAAaI,UAAU,aAAaI,QAASxB,KAAKH,WAA7D,cACA,4BAAQmB,GAAG,cAAcI,UAAU,aAAaI,QAASxB,KAAKF,aAA9D,aACA,2BAAOkB,GAAG,cAAa,+BAAQV,W,GA3DfmB,IAAMC,W,QC+BnBC,E,YA7Bb,WAAYnC,GAAQ,IAAD,8BACjB,4CAAMA,KAHRC,MAAQ,CAACmC,OAAQ,IAIf,EAAKC,aAAe,EAAKA,aAAajC,KAAlB,gBAFH,E,0EAKNgC,GACX5B,KAAKK,SAAS,CAACuB,OAAQA,IACvB5B,KAAKR,MAAMsC,gBAAgBF,EAAOG,S,+BAIlC,IAAIC,EAAU,GACVhC,KAAKR,MAAMyC,YAEbD,EADkBhC,KAAKR,MAAMyC,UAAU1B,KAAI,SAAA2B,GAAC,OAAIA,EAAEC,WAAWC,WACzC7B,KAAI,SAAA6B,GACtB,MAAO,CAACL,MAAOK,EAASC,MAAOD,OAGnC,OACE,yBAAKpB,GAAG,gBACN,kBAAC,IAAD,CACEgB,QAASA,EACTM,YAAY,YACZnB,SAAUnB,KAAK6B,aACfE,MAAO/B,KAAKP,MAAMmC,c,GA3BEH,IAAMC,WCA9Ba,EAAoB,qCACpBC,EAAO,aACPC,EAAa,4B,UCIbC,EAAc,+BAiBpB,SAASC,EAAoBC,GAC3B,IAAMC,EAAI,IAAIC,IAAIF,EAAiBG,SAASxC,KAAI,SAAA2B,GAAC,OAAIA,EAAEC,WAAF,SACrD,OAAOtD,OAAOmE,OAAOC,MAAMC,KAAKL,IAAIM,OAjBtCC,IAASC,YAAc,Q,IA8LRC,E,YAhKb,WAAY9D,GAAQ,IAAD,8BACjB,4CAAMA,KATRC,MAAQ,CACN8D,OAAQ,EAAE,IAAK,MACfC,KAAM,EACNC,QAAS,EACTb,iBAAkB,GAClBhC,mBAAoB,IAAIkC,KAKxB,EAAKY,qBAAuB,EAAKA,qBAAqB9D,KAA1B,gBAC5B,EAAK+D,0BAA4B,EAAKA,0BAA0B/D,KAA/B,gBACjC,EAAKgE,4BAA8B,EAAKA,4BAA4BhE,KAAjC,gBACnC,EAAKiE,oBAAsB,EAAKA,oBAAoBjE,KAAzB,gBAC3B,EAAKkE,aAAe,EAAKA,aAAalE,KAAlB,gBANH,E,0EASNmE,GACX,IAAMC,EAAcD,EAAQE,SAASD,YAAYE,QAC7CC,EAASC,SAASC,uBAAuB,kBAGzCF,EAAO,IAAIA,EAAO,GAAGG,SAEzB,IAAIlB,IAASmB,MAAM,IAChBC,UAAUR,GACVS,QA9CP,SAAyBjF,GACvB,IAAMkF,EAAe,CAAC,OAAQ,OAAQ,QACnCnE,KAAI,SAAAoE,GAAC,OAAInF,EAAMmF,MACfC,QAAO,SAAAxF,GAAC,OAAIA,KAAGyF,KAAK,OACvB,MAAM,6DAAN,OAE+BrF,EAAK,QAFpC,oDAGkCkF,EAHlC,wDAI8BlF,EAAK,KAJnC,8CAKoBA,EAAK,QALzB,2BAKuDA,EAAK,QAL5D,2BA0CasF,CAAgBf,EAAQ5B,aAChC4C,YAAY,QACZC,MAAMhF,KAAKO,O,0CAGK,IAAD,OAClBP,KAAKO,IAAM,IAAI6C,IAAS6B,IAAI,CAC1BC,UAAWlF,KAAKmF,aAChB9D,MAAO,kCACPkC,OAAQvD,KAAKP,MAAM8D,OACnBC,KAAMxD,KAAKP,MAAM+D,KACjBC,QAASzD,KAAKP,MAAMgE,UAGtBzD,KAAKO,IAAI6E,GAAG,QAAQ,WAClB,EAAK/E,SAAS,CACZgF,IAAK,EAAK9E,IAAI+E,YAAYD,IAAIE,QAAQ,GACtCC,IAAK,EAAKjF,IAAI+E,YAAYE,IAAID,QAAQ,GACtC/B,KAAM,EAAKjD,IAAIkF,UAAUF,QAAQ,QAIrCvF,KAAKO,IAAI6E,GAAG,QAAQ,WAClB,EAAK7E,IAAImF,WAAW,IAAItC,IAASuC,kBAAqB,eACtD,EAAKpF,IAAImF,WAAW,IAAItC,IAASwC,kBAAqB,eD3EnDC,MAAM,GAAD,OAAItD,EAAJ,YAAyBC,EAAzB,YAAiCC,EAAjC,kCAAqEW,IAASC,cACvFyC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAIC,KAAKC,MAAMF,MACxBH,MAAK,SAAAM,GAgBJ,OAfAA,EAAOrD,SAASsD,SAAQ,SAAAtC,GAEtBA,EAAQ5B,WAAa,CACnB,QAAW4B,EAAQ5B,WAAWC,QAC9B,KAAQ2B,EAAQ5B,WAAWmE,KAC3B,KAAQvC,EAAQ5B,WAAWoE,KAC3B,KAAQxC,EAAQ5B,WAAWqE,KAC3B,KAAQzC,EAAQ5B,WAAWsE,KAC3B,QAAW1C,EAAQ5B,WAAWuE,SAEhC,CAAC,OAAQ,OAAQ,QAAQL,SAAQ,SAAAhE,GAC/B,IAAMsE,EAAO,UAAMtE,EAAN,aACb0B,EAAQ5B,WAAWwE,GAAWxH,EAAkB4E,EAAQ5B,WAAWE,UAGhE+D,KC0DWN,MAAK,SAAAlD,GACrB,EAAKvC,SAAS,CACZuC,iBAAkBA,EAClBgE,WAAYjE,EAAoBC,KAIlC,EAAKe,4BAEL,EAAKpD,IAAIsG,UAAU,YAAa,CAC9B9F,KAAM,UACNkF,KAAMrD,IAGR,EAAKrC,IAAIuG,SAAS,CAChB9F,GAAI0B,EACJ3B,KAAM,SACNgG,OAAQ,YACRC,MAAO,CAEL,gBAAiB,CACfC,MAAO,CAAC,CAAC,EAAG,GAAI,CAAC,GAAI,IAAK,CAAC,GAAI,MAEjC,iBAAkB,IAElB,eAAgB,CAAC,QAAS,CAAC,MAAO,SAAS/H,OAAOH,GAClD,sBAAuB,OACvB,sBAAuB,MAI3B,EAAKwB,IAAI6E,GAAG,aAAc1C,GAAa,SAACvC,GACtC,EAAKI,IAAI2G,YAAY7F,MAAM8F,OAAS,aAGtC,EAAK5G,IAAI6E,GAAG,aAAc1C,GAAa,WACrC,EAAKnC,IAAI2G,YAAY7F,MAAM8F,OAAS,MAGtC,EAAK5G,IAAI6E,GAAG,QAAS1C,GAAa,SAAAvC,GAAC,OAAI,EAAK2D,aAAa3D,EAAE4C,SAAS,UAGtE,EAAKxC,IAAI6G,MAAM,CACb7D,OAAQ,EAAE,OAAQ,OAClBC,KAAM,EACN6D,MAAO,U,2CAKQlH,GACnB,IAAIf,EAAIY,KAAKP,MAAMmB,mBACfxB,EAAEyB,IAAIV,EAAEmH,OAAOrG,MACjB7B,EAAEmI,OAAOpH,EAAEmH,OAAOrG,MAElB7B,EAAEoI,IAAIrH,EAAEmH,OAAOrG,MAEjBjB,KAAKK,SAAS,CAACO,mBAAoBxB,M,kDAInC,IAAIqI,EAAa7I,EAAmB2B,IAAIpB,GACxCa,KAAKK,SAAS,CAACO,mBAAoB,IAAIkC,IAAI2E,O,oDAI3CzH,KAAKK,SAAS,CAACO,mBAAoB,IAAIkC,Q,0CAGrB3C,GAClB,IAAMuH,EAAkB1H,KAAKP,MAAMmD,iBAAiBG,SAAS4E,MACzD,SAAA5D,GAAO,OAAIA,EAAQ5B,WAAWC,UAAYjC,KAC9CH,KAAK8D,aAAa4D,GAClB1H,KAAKO,IAAI6G,MAAM,CACb7D,OAAQmE,EAAgBzD,SAASD,YACjCR,KAAM,O,2CAKR,GAAIxD,KAAKO,IAAIqH,SAASlF,GAAc,CAClC,IAAImF,EAAU,CAAC,OAGTjH,EAAqBZ,KAAKP,MAAMmB,mBACtC,CAAC,EAAG,EAAG,GAAGyF,SAAQ,SAAAyB,GAChB,IAAIlD,EAAS,CAAC,KAAD,aAAakD,EAAb,cACblH,EAAmByF,SAAQ,SAAA7F,GAAQ,OAAIoE,EAAOmD,KAAKvH,MACnDqH,EAAQE,KAAKnD,MAEf5E,KAAKO,IAAIyH,UAAUtF,EAAamF,M,+BAI1B,IAAD,OACP,OACE,yBAAK7G,GAAG,iBACN,yBAAKiH,IAAK,SAAAC,GAAE,OAAI,EAAK/C,aAAe+C,GAAIlH,GAAG,kBAC3C,yBAAKA,GAAG,eACN,yBAAKA,GAAG,oBACN,yBAAKA,GAAG,aAAR,yCACA,kBAAC,EAAD,CACEiB,UAAWjC,KAAKP,MAAMmD,iBAAiBG,SACvCjB,gBAAiB9B,KAAK6D,uBAE1B,kBAAC,EAAD,CACEjD,mBAAoBZ,KAAKP,MAAMmB,mBAC/BX,sBAAuBD,KAAK2D,0BAC5BzD,wBAAyBF,KAAK4D,4BAC9BxD,iBAAkBJ,KAAK0D,6B,GAnKjBjC,IAAMC,WC1BxByG,IAASC,OAAO,kBAAC,EAAD,MAAShE,SAASiE,eAAe,W","file":"static/js/main.5e0e95e9.chunk.js","sourcesContent":["const BROWN = '#603e1e'\n\nconst TAXONOMY_COLORS = {\n  'Academia/Research': '#07a4bc',\n  'Accelerator/Incubator': '#c30',\n  'Biofuels': '#7cc908',\n  'Buildings': '#036',\n  'Chemistry': '#c94208',\n  'Circular Economy': '#5a8925',\n  'Construction': BROWN,\n  'Enabling Technology/Components': BROWN,\n  'Energy Systems/Management': '#40a22a',\n  'Engineering': BROWN,\n  'Environmental Remediation': '#89256e',\n  'Evaluation/Compliance': '#9e4e16',\n  'Finance': '#269e11',\n  'Generation/Transmission': '#f80',\n  'Geology': '#9e4e16',\n  'Hydrogen': '#2cf',\n  'IIoT/IoT': '#a92278',\n  'Lighting': '#f4f390',\n  'Manufacturing': '#7b16ce',\n  'Materials': '#7b16ce',\n  'Media': '#d11265',\n  'Mobility as a Service': '#b75e35',\n  'Nuclear': '#f0f',\n  'Oil and Gas': '#ce3b16',\n  'Policy': '#660',\n  'Professional Services': '#164d82',\n  'Security/Cybersecurity': '#2c86f4',\n  'Sensors': '#dd4465',\n  'Solar': '#fce119',\n  'Storage': '#093',\n  'Sustainable Agriculture': '#898925',\n  'Thermal Energy': '#bc6d4b',\n  'Utility/Grid': '#f4a41a',\n  'Wave/Water/Hydro': '#20dbdb',\n  'Wind': '#167d7f',\n};\n\nconst DISPLAY_CATEGORIES = Object.keys(TAXONOMY_COLORS);\n\n// Last entry is fallthrough color\nconst CIRCLE_COLORS = Object.entries(TAXONOMY_COLORS).flat().concat(['#ccc']);\n\nexport { TAXONOMY_COLORS, DISPLAY_CATEGORIES, CIRCLE_COLORS };\n","const normalizeCategory = s => s.toLowerCase().replace(/[/ ]/g, '-');\n\nexport { normalizeCategory };\n","import React from 'react';\nimport { TAXONOMY_COLORS, DISPLAY_CATEGORIES } from './taxonomy-colors.js';\nimport { normalizeCategory } from './common.js';\n\nclass CompanyFilter extends React.Component {\n  state = {\n    displayCategories: true,\n  };\n\n  constructor(props) {\n    super(props);\n    this.handleSelectCategory = this.handleSelectCategory.bind(this);\n    this.selectAll = this.selectAll.bind(this);\n    this.deselectAll = this.deselectAll.bind(this);\n    this.toggleDisplayCategoryList = this.toggleDisplayCategoryList.bind(this);\n  }\n\n  selectAll() { this.props.onSelectAllCategories(); }\n\n  deselectAll() { this.props.onDeselectAllCategories(); }\n\n  handleSelectCategory(e) { this.props.onToggleCategory(e); }\n\n  toggleDisplayCategoryList() {\n    const displayCategories = this.state.displayCategories;\n    this.setState({displayCategories: !displayCategories});\n  }\n\n  render() {\n    const tableRows = DISPLAY_CATEGORIES.map(category => {\n      const sanitizedCat = normalizeCategory(category);\n      const checkboxId = `${sanitizedCat}-checkbox`;\n      const isChecked = this.props.selectedCategories.has(sanitizedCat);\n      return (\n        <tr key={sanitizedCat}>\n          <td>\n            <input\n              type=\"checkbox\"\n              id={checkboxId}\n              name={sanitizedCat}\n              checked={isChecked}\n              onChange={this.handleSelectCategory} />\n          </td>\n          <td>\n            <i className=\"category-legend\"\n            style={{background: TAXONOMY_COLORS[category]}}></i>\n          </td>\n          <td><label htmlFor={checkboxId}>{category}</label></td>\n        </tr>);\n    });\n\n    return (\n      <div id=\"company-filter\" className={this.state.displayCategories ? null : \"hidden\"}>\n        <button id=\"filter-toggle\" onClick={this.toggleDisplayCategoryList}>\n          <div className=\"flex-row\">\n            <div className=\"flex-grow\"><span className=\"header\">Filter by category</span></div>\n            <div className=\"hamburger-menu\"><div></div><div></div><div></div></div>\n          </div>\n        </button>\n        <div className=\"content\">\n          <div>\n            <button id=\"select-all\" className=\"select-all\" onClick={this.selectAll}>Select all</button>\n            <button id=\"select-none\" className=\"select-all\" onClick={this.deselectAll}>Clear all</button>\n            <table id=\"categories\"><tbody>{tableRows}</tbody></table>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default CompanyFilter;\n","import React from 'react';\nimport Select from 'react-select';\n\nclass CompanySelector extends React.Component {\n  state = {option: ''};\n\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(option) {\n    this.setState({option: option});\n    this.props.onSelectCompany(option.value);\n  }\n\n  render() {\n    var options = [];\n    if (this.props.companies) {\n      const companies = this.props.companies.map(f => f.properties.company);\n      options = companies.map(company => {\n        return {value: company, label: company};\n      });\n    }\n    return (\n      <div id=\"place-search\">\n        <Select\n          options={options}\n          placeholder=\"Search...\"\n          onChange={this.handleChange}\n          value={this.state.option} />\n      </div>);\n  }\n}\n\nexport default CompanySelector;\n","import mapboxgl from 'mapbox-gl';\nimport { normalizeCategory } from './common.js';\n\nconst DATASETS_ENDPOINT = \"https://api.mapbox.com/datasets/v1\";\nconst USER = \"sjespersen\";\nconst DATASET_ID = \"ck8ial4n30lew2zp4xon151jl\";\n\nfunction loadGeojsonData() {\n  return fetch(`${DATASETS_ENDPOINT}/${USER}/${DATASET_ID}/features?access_token=${mapboxgl.accessToken}`)\n    .then(response => response.text())\n    .then(data => JSON.parse(data))\n    .then(parsed => {\n      parsed.features.forEach(feature => {\n        // filter properties (TODO: Can we change this dataset-side?)\n        feature.properties = {\n          'company': feature.properties.company,\n          'city': feature.properties.city,\n          'tax1': feature.properties.tax1,\n          'tax2': feature.properties.tax2,\n          'tax3': feature.properties.tax3,\n          'website': feature.properties.website,\n        };\n        ['tax1', 'tax2', 'tax3'].forEach(label => {\n          const newprop = `${label}sanitized`;\n          feature.properties[newprop] = normalizeCategory(feature.properties[label]);\n        })\n      });\n      return parsed;\n    });\n}\n\nexport { loadGeojsonData };\n","import React from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport CompanyFilter from './CompanyFilter.js';\nimport CompanySelector from './CompanySelector.js';\nimport { CIRCLE_COLORS, DISPLAY_CATEGORIES } from './taxonomy-colors.js';\nimport { loadGeojsonData } from './data-loader.js';\nimport { normalizeCategory } from './common.js';\nimport './App.css';\n\nconst POINT_LAYER = 'energy-companies-point-layer'\n\nmapboxgl.accessToken = 'bogus';\n\nfunction getPopupContent(props) {\n  const categoryInfo = ['tax1', 'tax2', 'tax3']\n    .map(k => props[k])\n    .filter(s => s).join(\" | \");\n  return `\n    <div class=\"popup\">\n      <h3 class=\"company-name\">${props['company']}</h3>\n      <span class=\"category-info\">${categoryInfo}</span><br />\n      <span class=\"city-info\">${props['city']}</span><br />\n      <span><a href=${props['website']} target=\"blank\">${props['website']}</a></span>\n    </div>`;\n}\n\nfunction compileCategoryList(companiesGeojson) {\n  const c = new Set(companiesGeojson.features.map(f => f.properties['tax1']));\n  return Object.values(Array.from(c)).sort();\n}\n\nclass App extends React.Component {\n  map;\n  state = {\n    center: [-121, 36.5],\n    zoom: 6,\n    minZoom: 6,\n    companiesGeojson: {},\n    selectedCategories: new Set(),\n  };\n\n  constructor(props) {\n    super(props);\n    this.handleToggleCategory = this.handleToggleCategory.bind(this);\n    this.handleSelectAllCategories = this.handleSelectAllCategories.bind(this);\n    this.handleDeselectAllCategories = this.handleDeselectAllCategories.bind(this);\n    this.handleSelectCompany = this.handleSelectCompany.bind(this);\n    this.displayPopup = this.displayPopup.bind(this);\n  }\n\n  displayPopup(feature) {\n    const coordinates = feature.geometry.coordinates.slice();\n    var popUps = document.getElementsByClassName('mapboxgl-popup');\n    // Check if there is already a popup on the map and if so, remove it\n    // This prevents multiple popups in the case of overlapping circles\n    if (popUps[0]) popUps[0].remove();\n\n    new mapboxgl.Popup({})\n      .setLngLat(coordinates)\n      .setHTML(getPopupContent(feature.properties))\n      .setMaxWidth(\"40vw\")\n      .addTo(this.map);\n  }\n\n  componentDidMount() {\n    this.map = new mapboxgl.Map({\n      container: this.mapContainer,\n      style: 'mapbox://styles/mapbox/dark-v10',\n      center: this.state.center,\n      zoom: this.state.zoom,\n      minZoom: this.state.minZoom,\n    });\n\n    this.map.on('move', () => {\n      this.setState({\n        lng: this.map.getCenter().lng.toFixed(4),\n        lat: this.map.getCenter().lat.toFixed(4),\n        zoom: this.map.getZoom().toFixed(2)\n      });\n    });\n\n    this.map.on('load', () => {\n      this.map.addControl(new mapboxgl.FullscreenControl(), 'bottom-left');\n      this.map.addControl(new mapboxgl.NavigationControl(), 'bottom-left');\n\n      loadGeojsonData().then(companiesGeojson => {\n        this.setState({\n          companiesGeojson: companiesGeojson,\n          categories: compileCategoryList(companiesGeojson),\n        });\n\n        // initially select all categories\n        this.handleSelectAllCategories();\n\n        this.map.addSource('companies', {\n          type: 'geojson',\n          data: companiesGeojson,\n        });\n\n        this.map.addLayer({\n          id: POINT_LAYER,\n          type: 'circle',\n          source: 'companies',\n          paint: {\n            // make circles larger as the user zooms\n            'circle-radius': {\n              stops: [[7, 5], [14, 12], [20, 50]]\n            },\n            'circle-opacity': 0.85,\n            // color circles by primary category\n            'circle-color': ['match', ['get', 'tax1']].concat(CIRCLE_COLORS),\n            'circle-stroke-color': '#fff',\n            'circle-stroke-width': 0.4,\n          }\n        });\n\n        this.map.on('mouseenter', POINT_LAYER, (e) => {\n          this.map.getCanvas().style.cursor = 'pointer';\n        });\n\n        this.map.on('mouseleave', POINT_LAYER, () => {\n          this.map.getCanvas().style.cursor = '';\n        });\n\n        this.map.on('click', POINT_LAYER, e => this.displayPopup(e.features[0]));\n      });\n\n      this.map.flyTo({\n        center: [-122.21, 37.65], // [lng, lat]\n        zoom: 8,\n        speed: 0.5,\n      });\n    });\n  }\n\n  handleToggleCategory(e) {\n    var s = this.state.selectedCategories;\n    if (s.has(e.target.name)) {\n      s.delete(e.target.name);\n    } else {\n      s.add(e.target.name);\n    }\n    this.setState({selectedCategories: s});\n  }\n\n  handleSelectAllCategories() {\n    let normalized = DISPLAY_CATEGORIES.map(normalizeCategory);\n    this.setState({selectedCategories: new Set(normalized)});\n  }\n\n  handleDeselectAllCategories() {\n    this.setState({selectedCategories: new Set()});\n  }\n\n  handleSelectCompany(e) {\n    const selectedCompany = this.state.companiesGeojson.features.find(\n        feature => feature.properties.company === e);\n    this.displayPopup(selectedCompany);\n    this.map.flyTo({\n      center: selectedCompany.geometry.coordinates,\n      zoom: 14,\n    });\n  }\n\n  componentDidUpdate() {\n    if (this.map.getLayer(POINT_LAYER)) {\n      var filters = [\"any\"];\n      // If ANY of the 3 taxonomies for a company are selected, they should be\n      // displayed on the map.\n      const selectedCategories = this.state.selectedCategories;\n      [1, 2, 3].forEach(i => {\n        var filter = [\"in\", `tax${i}sanitized`];\n        selectedCategories.forEach(category => filter.push(category));\n        filters.push(filter);\n      });\n      this.map.setFilter(POINT_LAYER, filters);\n    }\n  }\n\n  render() {\n    return (\n      <div id=\"app-container\">\n        <div ref={el => this.mapContainer = el} id=\"map-container\" />\n        <div id=\"map-overlay\">\n          <div id=\"title-and-search\">\n            <div id=\"map-title\">Silicon Valley Energy Ecosystem, 2019</div>\n            <CompanySelector\n              companies={this.state.companiesGeojson.features}\n              onSelectCompany={this.handleSelectCompany}/>\n          </div>\n          <CompanyFilter\n            selectedCategories={this.state.selectedCategories}\n            onSelectAllCategories={this.handleSelectAllCategories}\n            onDeselectAllCategories={this.handleDeselectAllCategories}\n            onToggleCategory={this.handleToggleCategory} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}